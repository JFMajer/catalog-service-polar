#############################################################
# This workflow will build a Java project with Gradle
# Docker image will be created and pushed to image registry
#############################################################


#############################################################
# Specifies when workflow will run
#############################################################

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  IMAGE_NAME: catalog-service

#############################################################
# Specifies jobs to run
#############################################################

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew build -x test --info
      - name: code vulnerability scan
        uses: anchore/scan-action@v3
        id: scan-anchore
        with:
          path: "${{ github.workspace }}"
          fail-build: false
          severity-cutoff: high
      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan-anchore.outputs.sarif }}
      - name: build docker image
        run: docker build . --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
      - name: login to github package registry
        run: echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u $ --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION